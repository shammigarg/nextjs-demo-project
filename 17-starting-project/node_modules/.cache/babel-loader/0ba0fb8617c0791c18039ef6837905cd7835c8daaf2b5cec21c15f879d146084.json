{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nlet initialInputState = {\n  value: \"\",\n  isTouched: false\n};\nconst inputStateReducer = (state, action) => {\n  return inputStateReducer;\n};\nconst useInput = validateValue => {\n  _s();\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  //   const [enteredValue, setEnteredValue] = useState('');\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const enteredValueIsValid = validateValue(inputState.value);\n  const hasError = !enteredValueIsValid && inputState.isTouched;\n  const inputValueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n  const inputBlurHandler = () => {\n    dispatch({\n      type: \"BLUR\"\n    });\n    setIsTouched(true);\n  };\n  const reset = () => {\n    dispatch({\n      type: \"RESET\",\n      value: \"\"\n    });\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n  return {\n    value: enteredValue,\n    hasError,\n    isValid: enteredValueIsValid,\n    inputValueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\nexport default useInput;","map":{"version":3,"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","useInput","validateValue","_s","inputState","dispatch","enteredValueIsValid","hasError","inputValueChangeHandler","event","type","target","inputBlurHandler","setIsTouched","reset","setEnteredValue","enteredValue","isValid"],"sources":["/Users/sonusinghal/Learning/Shammi/React/17-starting-project/src/hooks/use-input1.js"],"sourcesContent":["import { useReducer } from \"react\"\n\nlet initialInputState = {\n    value: \"\",\n    isTouched: false, \n\n}\n\nconst inputStateReducer = (state, action) => {\n    return inputStateReducer\n}\n\nconst useInput = (validateValue) => {\n\n  const [inputState, dispatch] =  useReducer(inputStateReducer, initialInputState)\n//   const [enteredValue, setEnteredValue] = useState('');\n//   const [isTouched, setIsTouched] = useState(false);\n\n  const enteredValueIsValid = validateValue(inputState.value) ;\n  const hasError = !enteredValueIsValid && inputState.isTouched;\n\n\n  const inputValueChangeHandler = event => {\n    dispatch({type: \"INPUT\", value: event.target.value})\n  } \n\n  const inputBlurHandler = () => {\n    dispatch({type: \"BLUR\"})\n     setIsTouched(true);\n  }\n\n  const reset = ()=>{\n    dispatch({type: \"RESET\", value:\"\"})\n    setEnteredValue('');\n    setIsTouched(false);\n  }\n   \n\n  return{\n    value: enteredValue,\n    hasError,\n    isValid: enteredValueIsValid,\n    inputValueChangeHandler,\n    inputBlurHandler,\n    reset,\n  }\n\n}\n\nexport default useInput;\n\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,IAAIC,iBAAiB,GAAG;EACpBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE;AAEf,CAAC;AAED,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,OAAOF,iBAAiB;AAC5B,CAAC;AAED,MAAMG,QAAQ,GAAIC,aAAa,IAAK;EAAAC,EAAA;EAElC,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAIX,UAAU,CAACI,iBAAiB,EAAEH,iBAAiB,CAAC;EAClF;EACA;;EAEE,MAAMW,mBAAmB,GAAGJ,aAAa,CAACE,UAAU,CAACR,KAAK,CAAC;EAC3D,MAAMW,QAAQ,GAAG,CAACD,mBAAmB,IAAIF,UAAU,CAACP,SAAS;EAG7D,MAAMW,uBAAuB,GAAGC,KAAK,IAAI;IACvCJ,QAAQ,CAAC;MAACK,IAAI,EAAE,OAAO;MAAEd,KAAK,EAAEa,KAAK,CAACE,MAAM,CAACf;IAAK,CAAC,CAAC;EACtD,CAAC;EAED,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;IAC7BP,QAAQ,CAAC;MAACK,IAAI,EAAE;IAAM,CAAC,CAAC;IACvBG,YAAY,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMC,KAAK,GAAGA,CAAA,KAAI;IAChBT,QAAQ,CAAC;MAACK,IAAI,EAAE,OAAO;MAAEd,KAAK,EAAC;IAAE,CAAC,CAAC;IACnCmB,eAAe,CAAC,EAAE,CAAC;IACnBF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAGD,OAAM;IACJjB,KAAK,EAAEoB,YAAY;IACnBT,QAAQ;IACRU,OAAO,EAAEX,mBAAmB;IAC5BE,uBAAuB;IACvBI,gBAAgB;IAChBE;EACF,CAAC;AAEH,CAAC;AAAAX,EAAA,CAnCKF,QAAQ;AAqCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}