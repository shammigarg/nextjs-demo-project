{"ast":null,"code":"var _jsxFileName = \"/Users/sonusinghal/Learning/Shammi/React/17-starting-project/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Entered name is valid');\n    }\n  }, [enteredNameIsValid]);\n  const InputValueRef = useRef();\n  const nameInputValueHandler = event => {\n    setEnteredName(event.target.value);\n  };\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = InputValueRef.current.value;\n    console.log(enteredValue);\n    setEnteredName(\"\");\n    // InputValueRef.current.value = \"\" // Not an ideal way to manipulate the DOM\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: enteredName,\n        ref: InputValueRef,\n        onBlur: nameInputBlurHandler,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputValueHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter valid Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"PFWIGgTLACWH3c8vH+8fuYZ5inI=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","useEffect","jsxDEV","_jsxDEV","SimpleInput","props","_s","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","InputValueRef","nameInputValueHandler","event","target","value","nameInputBlurHandler","trim","formSubmitHandler","preventDefault","enteredValue","current","nameInputIsInvalid","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","onBlur","type","id","onChange","_c","$RefreshReg$"],"sources":["/Users/sonusinghal/Learning/Shammi/React/17-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\n\n\nconst SimpleInput = (props) => {\n\nconst [enteredName, setEnteredName] = useState(\"\");\nconst [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\nconst [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\nuseEffect(()=>{\n  if(enteredNameIsValid){\n   console.log('Entered name is valid') \n  }\n}, [enteredNameIsValid])\n\nconst InputValueRef = useRef()\n\nconst nameInputValueHandler = event =>{\n  setEnteredName(event.target.value)\n}\n\n\n\nconst nameInputBlurHandler = ()=>{\n  setEnteredNameTouched(true);\n\n  if(enteredName.trim() === \"\"){\n    setEnteredNameIsValid(false)\n    return;\n  }\n\n}\n\n\nconst formSubmitHandler = event =>{\n  event.preventDefault();\n\n  setEnteredNameTouched(true);\n\n  if(enteredName.trim() === \"\"){\n    setEnteredNameIsValid(false)\n    return;\n  }\n\n  setEnteredNameIsValid(true)\n  console.log(enteredName)\n\n  const enteredValue = InputValueRef.current.value;\n  console.log(enteredValue)\n  setEnteredName(\"\")\n  // InputValueRef.current.value = \"\" // Not an ideal way to manipulate the DOM\n}\n const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\"\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input value={enteredName}  \n        ref={InputValueRef}\n        onBlur={nameInputBlurHandler}\n        type='text' id='name' onChange={nameInputValueHandler}/>\n        {nameInputIsInvalid && <p className=\"error-text\">Please enter valid Input</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n      \n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}